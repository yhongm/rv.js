!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var NODE_REPLACE=0,CHILD_RE_ORDER=1,NODE_PROPS=2,NODE_CONTENT=3,Element=function(){function e(t,n,r){if(_classCallCheck(this,e),!(this instanceof e))return new e(tagName,n,r);if(this.tag=t,this.props=n||{},this.children=r||[],this.key=n?n.key:void 0,!this.key)throw new Error(t+" ... html tag the key is undefined");var i=0;this.children.forEach(function(t){t instanceof e&&(i+=t.count),i++}),this.count=i}return _createClass(e,[{key:"render",value:function(){var t=document.createElement(this.tag),n=this.props;for(var r in n)Util.setAttr(t,r,n[r]);return this.children.forEach(function(n){var r=n instanceof e?n.render():document.createTextNode(n);t.appendChild(r)}),t}}]),e}(),Diff=function(){function e(t,n){_classCallCheck(this,e),this.index=0,this.patches={},this.dfsWalk(t,n,this.index)}return _createClass(e,[{key:"dfsWalk",value:function(e,t,n){var r=[];if(null==t);else if(Util.isString(e)&&Util.isString(t))e!=t&&r.push({type:NODE_CONTENT,content:t});else if(e.tagName===t.tagName&&e.key==t.key){var i=this.diffProps(e,t);i&&r.push({type:NODE_PROPS,props:i}),Util.isIgnoreChildren(t)||this.diffChildren(e.children,t.children,n,r)}else r.push({type:NODE_REPLACE,node:t});r.length&&(this.patches[n]=r)}},{key:"diffProps",value:function(e,t){var n=e.props,r=t.props,i={},a=!0;for(var s in n)r[s]!==n[s]&&(a=!1,i[s]=r[s]);for(var o in r)n.hasOwnProperty(o)||(a=!1,i[o]=r[o]);return a?null:i}},{key:"diffChildren",value:function(e,t,n,r){var i=this,a=new DiffList(e,t).getResult();if(t=a.child,a.moves.length){var s={type:CHILD_RE_ORDER,moves:a.moves};r.push(s)}var o=null,l=n;e.forEach(function(e,n){var r=t[n];l=o&&o.count?l+o.count+1:l+1,i.dfsWalk(e,r,l),o=e})}}]),e}(),Patch=function(){function e(t,n){_classCallCheck(this,e);this.dfsWalk(t,{index:0},n)}return _createClass(e,[{key:"dfsWalk",value:function(e,t,n){for(var r=n[t.index],i=e.childNodes?e.childNodes.length:0,a=0;a<i;a++){var s=e.childNodes[a];t.index++,this.dfsWalk(s,t,n)}r&&this.applyPatches(e,r)}},{key:"applyPatches",value:function(e,t){var n=this;t.forEach(function(t){switch(t.type){case NODE_REPLACE:var r=Util.isString(t.node)?document.createTextNode(t.node):t.node.render();e.parentNode.replaceChild(r,e);break;case CHILD_RE_ORDER:n.reorderChildren(e,t.moves);break;case NODE_PROPS:n.setProps(e,t.props);break;case NODE_CONTENT:e.textContent?e.textContent=t.content:e.nodeValue=t.content}})}},{key:"reorderChildren",value:function(e,t){var n=Util.toArray(e.childNodes),r={};n.forEach(function(e){if(1===e.nodeType){var t=e.getAttribute("key");t&&(r[t]=e)}}),t.forEach(function(t){var i=t.index;if(0===t.type)n[i]===e.childNodes[i]&&e.removeChild(e.childNodes[i]),n.splice(i,1);else if(1===t.type){var a=r[t.item.key]?r(t.item.key).cloneNode(!0):Util.isString(t.item)?document.createTextNode(t.item):t.item.render();n.splice(i,0,a),e.insertBefore(a,e.childNodes[i]||null)}})}},{key:"setProps",value:function(e,t){for(var n in t)if(void 0===t[n])e.removeAttribute(n);else{var r=t[n];Util.setAttr(e,n,r)}}}]),e}(),Util=function(){function Util(){_classCallCheck(this,Util)}return _createClass(Util,null,[{key:"isString",value:function(e){return"string"==typeof e}},{key:"toArray",value:function(e){if(!e)return[];for(var t=[],n=0;n<e.length;n++)t.push(e[n]);return t}},{key:"isForIn",value:function(e){return/^\w* _in_ \w*$/.test(e)}},{key:"isForForIn",value:function(e){return/^\w* _in*$/.test(e)}},{key:"isForOrForFor",value:function(e){return/^\w* _in_ \w|_in*$/.test(e)}},{key:"isIgnoreChildren",value:function(e){return e.props&&e.props.hasOwnProperty("ignore")}},{key:"isNumber",value:function(e){if(null==e||""===e)return!1;if("string"==typeof e){return!!(/^\d+$/.test(e)||/^-\d+$/.test(e)||/^[1-9]\d*[.]\d+$/.test(e)||/^0[.]\d+$/.test(e)||/^-[1-9]\d*[.]\d+$/.test(e)||/^-0[.]\d+$/.test(e))}return"number"==typeof e}},{key:"setAttr",value:function(e,t,n){switch(t){case"style":e.style.cssText=n;break;case"value":var r=e.tagName||"";"input"===(r=r.toLowerCase())||"textarea"===r?e.value=n:e.setAttribute(t,n);break;default:e.setAttribute(t,n)}}},{key:"isPlaceHolder",value:function(e){return!!e&&!!/^%#\w*.\w*#%$/.test(e)}},{key:"isDotOperatorExpression",value:function(e){return/^\w*\.\w*$/.test(e)}},{key:"getPlaceHolderValue",value:function(e){return e.slice(2,-2)}},{key:"isOperatorExpression",value:function(e){return!!Util.isString(e)&&!!/^\{\w*|\|\%+\}$/.test(e)}},{key:"getOperatorExpression",value:function getOperatorExpression(content,data,dataKey){if(Util.isString(content)){var expression=content.slice(content.indexOf("{")+1,content.indexOf("}")),startIndex=expression.indexOf("%#"),endIndex=expression.indexOf("#%")+2;if(-1!=startIndex&&-1!=endIndex&&startIndex<endIndex){var placeHolder=expression.slice(startIndex,endIndex),realValue=void 0;if(placeHolder.indexOf(".")>0){if(Util.getPlaceHolderValue(placeHolder).split(".")[0]===dataKey){var placeHolderValue=data[Util.getPlaceHolderValue(placeHolder).split(".")[1]];realValue=Util.isNumber(placeHolderValue)?placeHolderValue:'"'+placeHolderValue+'"'}}else realValue=data[Util.getPlaceHolderValue(placeHolder)];expression=expression.replace(placeHolder,realValue)}return eval(expression)}}}]),Util}(),DiffList=function(){function e(t,n){_classCallCheck(this,e);var r=this.makeKeyIndex(t).keyIndex,i=this.makeKeyIndex(n).keyIndex;this.moveOperator=[],this.childList=[];for(var a=0;a<t.length;a++){var s=t[a],o=this.getKey(s);i.hasOwnProperty(o)?this.childList.push(n[i[o]]):this.childList.push(null)}this.tempList=this.childList.slice(0);for(var l=0;l<this.tempList.length;)null===this.tempList[l]?(this.remove(l),this.removeCopyTempList(l)):l++;for(var u=0,c=0;c<n.length;c++){var p=n[c],h=this.getKey(p),d=this.tempList[u],f=this.getKey(d);if(d)if(h!=f)if(r.hasOwnProperty(h))h===getKey(this.tempList[u+1])?(this.remove(c),this.removeCopyTempList(u),u++):this.insert(c,p);else this.insert(c,p);else u++;else this.insert(c,p)}for(var v=this.tempList.length-u;u++<this.tempList.length;)v--,this.remove(v+n.length)}return _createClass(e,[{key:"makeKeyIndex",value:function(e){for(var t={},n=0;n<e.length;n++){var r=e[n];t[this.getKey(r)]=n}return{keyIndex:t}}},{key:"getKey",value:function(e){if(e)return e.key}},{key:"removeCopyTempList",value:function(e){this.tempList.splice(e,1)}},{key:"remove",value:function(e){this.moveOperator.push({index:e,type:0})}},{key:"insert",value:function(e,t){this.moveOperator.push({index:e,item:t,type:1})}},{key:"getResult",value:function(){return{moves:this.moveOperator,child:this.childList}}}]),e}();function observe(e,t,n){return Object.keys(e).forEach(function(r){var i=e[r],a=new Observable;i instanceof Object&&observe(i,t,n),t.put(r,a),Object.defineProperty(e,r,{get:function(){return a.add(n),i},set:function(e){var t=i!==e;i=e,t&&a.invoke()}})}),e}var Observable=function(){function e(){_classCallCheck(this,e),this.updateFunctions=new Set}return _createClass(e,[{key:"add",value:function(e){this.updateFunctions.add(e)}},{key:"invoke",value:function(){this.updateFunctions.forEach(function(e){return e()})}}]),e}();function clone(e){var t=function(e){return null===e?"null":void 0===e?"undefined":Object.prototype.toString.call(e).slice(8,-1)},n=void 0,r=t(e);if("Object"===r)n={};else{if("Array"!==r)return e;n=[]}for(key in e){var i=e[key];"Object"==t(i)?n[key]=arguments.callee(i):"Array"==t(i)?n[key]=arguments.callee(i):n[key]=e[key]}return n}function h(e,t,n){return new Element(e,t,n)}function diff(e,t){return new Diff(e,t).patches}function patch(e,t){return new Patch(e,t)}var Map=function(){function e(){_classCallCheck(this,e),this.length=0,this.map=new Object}return _createClass(e,[{key:"put",value:function(e,t){e in this.map||this.length++,this.map[e]=t}},{key:"get",value:function(e){return e in this.map?this.map[e]:null}},{key:"remove",value:function(e){e in this.map&&(delete this.map[e],this.length--)}},{key:"hasKey",value:function(e){return e in this.map}},{key:"forEach",value:function(e){var t=this;Object.keys(this.map).forEach(function(n){e(t.map[n])})}},{key:"size",value:function(){return this.length}},{key:"clear",value:function(){length=0,this.map=new Object}}]),e}(),YhmParse=function(){function e(){_classCallCheck(this,e),this.componetMap=new Map,this.mIndex=0,this.mMap=new Map,this.mPropRe=/([^=\s]+)(\s*=\s*((\"([^"]*)\")|(\'([^']*)\')|[^>\s]+))?/gm,this.mHandler={startELement:function(e,t,n,r){if(r.mIndex+=1,r.componetMap.hasKey(e))console.log("con,prop:"+JSON.stringify(r.componetMap.get(e).getProp())),console.log("con,dom:"+JSON.stringify(r.componetMap.get(e).getDom())),console.log("tagName:"+e+" ,prop:"+JSON.stringify(t)),r.componetMap.get(e).apply(t),r.mMap.put(r.mIndex,r.componetMap.get(e).getDom());else{var i={tag:e,props:t,children:[],index:r.mIndex,content:n,isClose:!1};n.length>0&&i.children.push(n.trim()),r.mMap.put(r.mIndex,i)}},endElement:function(e){e.mMap.get(e.mIndex).isClose=!0,e.mMap.hasKey(e.mIndex-1)&&(e.mMap.get(e.mIndex-1).children.push(e.mMap.get(e.mIndex)),e.mMap.remove(e.mIndex)),e.mIndex-=1}}}return _createClass(e,[{key:"useCustomComponent",value:function(e){this.componetMap.put(e.getName(),e)}},{key:"parseHtmlTemplate",value:function(e){for(var t=new Date/1e3,n=0;e;){var r=e.indexOf("<"),i=e.indexOf(">")||e.indexOf("/>"),a=e.indexOf("</"),s=e.indexOf(">"),o=e.indexOf("\x3c!--"),l=e.indexOf("--\x3e");if(0==o&&-1!=l&&l>o)n=l+3,e.substring(o+4,l+3),e=e.substring(n);else if(-1!=a&&-1!=s&&s>a)n=s+1,h(e.substring(a,s+1),this),e=e.substring(n);else if(-1!=r&&-1!=i&&i>r){n=i+1;var u="";e.indexOf("<",n)>-1&&e.indexOf("<",n)>i&&(u=e.substring(n,e.indexOf("<",n)).trim()),p(e.substring(r,i+1),u,this),e=e.substring(n)}else;}var c=new Date/1e3;function p(e,t,n){var r=-1!=e.indexOf(" ")?e.indexOf(" "):-1==e.indexOf("/>")?e.indexOf(">"):e.indexOf("/>"),i=e.substring(e.indexOf("<")+1,r),a={};if(e.indexOf(" ")>-1)for(var s=e.substring(e.indexOf(" ")+1,e.indexOf(">")).match(n.mPropRe),o=0;o<s.length;o++){var l=s[o];a[l.split("=")[0]]=l.split("=")[1].match(/(?<=").*?(?=")/)[0]}n.mHandler&&(/(?<=").*?(?=")/.test(t)&&(t=t.match(/(?<=").*?(?=")/)[0]),n.mHandler.startELement(i,a,t,n))}function h(e,t){t.mHandler&&t.mHandler.endElement(t)}console.log("total parse time:"+(c-t))}},{key:"getHtmlDom",value:function(){return this.mMap.get(1)}}]),e}(),RvComponent=function(){function e(t){_classCallCheck(this,e);var n=t.dom,r=t.props,i=t.name,a=t.data,s=t.run,o=t.watch;this.dom=n,this.rdom=this.rdom,this.props=r,this.name=i,this.data=a,this.componentRun=s,this.rvDomUtil=new RVDomUtil(a),this.observeMap=new Map,this.watchObj=o,this.applyTruthFulData()}return _createClass(e,[{key:"applyTruthFulData",value:function(){console.log("before dom:"+JSON.stringify(this.rdom)),this.rdom=this.rvDomUtil.applyTruthfulData(this.dom),console.log("after dom:"+JSON.stringify(this.rdom))}},{key:"run",value:function(){this.componentRun.call(this)}},{key:"getName",value:function(){return this.name}},{key:"apply",value:function(e){var t=!0,n=!1,r=void 0;try{for(var i,a=Object.keys(this.props)[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){var s=i.value;e[s]&&(this.props[s]=e[s])}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}}},{key:"getDom",value:function(){return this.rdom}},{key:"getProp",value:function(){return this.props}}]),e}(),RVDomUtil=function(){function e(t){_classCallCheck(this,e),this.data=t}return _createClass(e,[{key:"getVirtualElement",value:function(e){var t=this,n=[];for(var r in e.children){var i=e.children[r];if(i instanceof Array)i.forEach(function(e){var r=t.getVirtualElement(e);n.push(r)});else if(i instanceof Object){var a=this.getVirtualElement(i);n.push(a)}else n.push(i)}return h(e.tag,e.props,n)}},{key:"applyTruthfulData",value:function(e){var t=this;if("for"in e.props){var n=[],r=void 0;if(!Util.isForIn(e.props.for))throw new Error("the for directive use error");"childDomDatakey"in e?(n=e.data,r=e.childDomDatakey):"domDataKey"in e?(e.props.for.split(" _in_ ")[1]===e.domDataKey&&(n=e.data),r=e.props.for.split(" _in_ ")[0]):(n=data[e.props.for.split(" _in_ ")[1]],r=e.props.for.split(" _in_ ")[0]);var i=[];return n.forEach(function(n){var a=t.vdom2rdom(e,n,r,n);i.push(a)}),i}var a=void 0,s=void 0;return"data"in e?(a=e.data,s=e.childDomDatakey):(a=this.data,s=void 0),this.vdom2rdom(e,a,s,a)}},{key:"vdom2rdom",value:function(e,t,n,r){var i={};i.tag=e.tag,i.children=[],i.props={};var a=Object.keys(e.props);for(var s in a){var o=a[s];if("style"===o){var l=e.props[o];if(l.indexOf(",")>-1){var u=l.split(",");i.props[o]=this.handleArrayStyle(t,u,n)}else i.props[o]=this.handleSingleStyle(t,l,n)}else Util.isPlaceHolder(e.props[o])?Util.isDotOperatorExpression(Util.getPlaceHolderValue(e.props[o]))?i.props[o]=t[Util.getPlaceHolderValue(e.props[o]).split(".")[1]]:i.props[o]=r[Util.getPlaceHolderValue(e.props[o])]:Util.isOperatorExpression(e.props[o])?i.props[o]=Util.getOperatorExpression(e.props[o],t,n):i.props[o]=e.props[o]}for(var c in e.children)Util.isString(e.children[c])?Util.isPlaceHolder(e.children[c])?-1==Util.getPlaceHolderValue(e.children[c]).indexOf(n)?i.children[c]=r[Util.getPlaceHolderValue(e.children[c])]:i.children[c]=t[Util.getPlaceHolderValue(e.children[c]).split(".")[1]]:i.children[c]=e.children[c]:(e.children[c]instanceof Object&&("childDomData"in e.props?(e.children[c].childDomDatakey=e.props.childDomData,e.children[c].data=t):"domData"in e.props&&(e.children[c].domDataKey=e.props.domData,e.children[c].data=t[c]),e.children[c].data=t),i.children[c]=this.applyTruthfulData(e.children[c]));return i}},{key:"handleSingleStyle",value:function(e,t,n){var r="";if(n)if(Util.isPlaceHolder(t))if(-1!=Util.getPlaceHolderValue(t).indexOf(n)){r=e[Util.getPlaceHolderValue(t).split(".")[1]]}else{var i=t.split(":")[0],a=t.split(":")[1];r=i+":"+(a=e[Util.getPlaceHolderValue(a)])}else r=t;else{var s=t.split(":")[0],o=t.split(":")[1];r=Util.isPlaceHolder(o)?s+":"+(o=e[Util.getPlaceHolderValue(o)]):t}return r}},{key:"handleArrayStyle",value:function(e,t,n){var r="",i=!0,a=!1,s=void 0;try{for(var o,l=t[Symbol.iterator]();!(i=(o=l.next()).done);i=!0){var u=o.value;r+=this.handleSingleStyle(e,u,n)+";"}}catch(e){a=!0,s=e}finally{try{!i&&l.return&&l.return()}finally{if(a)throw s}}return r}}]),e}(),RV=function(){function e(t){_classCallCheck(this,e);var n=t.el,r=t.data,i=t.template;this.el=n,this.data=r,this.template=i,this.observeMap=new Map,this.parse=new YhmParse,this.rvDomUtil=new RVDomUtil(this.data)}return _createClass(e,[{key:"use",value:function(e){this.parse.useCustomComponent(e)}},{key:"run",value:function(){var e=this,t=Util.isString(this.el)?document.querySelector(this.el):this.el,n=this._getDomTree(),r=this;this.parse.componetMap.forEach(function(e){observe(e.data,e.observeMap,function(){n=r._getDomTree(),r._updatedom(n)}),Object.keys(e.watchObj).forEach(function(t){e.observeMap.hasKey(t)&&e.observeMap.get(t).add(function(){e.watchObj[t](),e.applyTruthFulData()})}),e.run()}),this.ve=this.rvDomUtil.getVirtualElement(this.rvDomUtil.applyTruthfulData(n)),this.w=this.ve.render(),t.appendChild(this.w),observe(this.data,this.observeMap,function(){e._updatedom(n)}),this._updatedom(n)}},{key:"_getDomTree",value:function(){try{this.parse.parseHtmlTemplate(this.template.trim())}catch(e){console.error("rv parse e:"+e)}return this.parse.getHtmlDom()}},{key:"_updatedom",value:function(e){var t=this.rvDomUtil.getVirtualElement(this.rvDomUtil.applyTruthfulData(e));window.nve=t,window.ve=this.ve,patch(this.w,diff(this.ve,t)),this.ve=t}},{key:"watch",value:function(e,t){this.observeMap.hasKey(e)&&this.observeMap.get(e).add(t)}}],[{key:"component",value:function(e){var t=e.name,n=e.template,r=e.props,i=e.data,a=new YhmParse;a.parseHtmlTemplate(n.trim());var s=a.getHtmlDom();return new RvComponent({dom:s,props:r,name:t,data:i,run:e.run,watch:e.watch})}}]),e}();exports.default=RV}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,